from _typeshed import Incomplete
from typing import Union

class HighPrecisionAlgorithms:
    add: Incomplete
    sub: Incomplete
    mul: Incomplete
    def __init__(self) -> None: ...
    class Addition:
        @staticmethod
        def int(a: int, b: int) -> int: ...
        def float(self, a: float, b: float) -> float: ...
        def __call__(self, a: Union[int, float], b: Union[int, float]) -> Union[int, float]: ...
    class Subtraction:
        @staticmethod
        def int(a: int, b: int) -> int: ...
        def float(self, a: float, b: float) -> float: ...
        def __call__(self, a: Union[int, float], b: Union[int, float]) -> Union[int, float]: ...
    class Multiplication:
        @staticmethod
        def int(a: int, b: int) -> int: ...
        def float(self, a: float, b: float) -> float: ...
        def __call__(self, a: Union[int, float], b: Union[int, float]) -> Union[int, float]: ...
    class Divide:
        @staticmethod
        def int(a: int, b: int) -> float: ...
