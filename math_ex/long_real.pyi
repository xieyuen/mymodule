from _typeshed import Incomplete
from typing import Tuple, TypeVar

HPA: Incomplete
LR = TypeVar('LR')

class LongReal:
    abs: str
    sym: str
    def __init__(self, num: int | float | str | LR) -> None: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __bool__(self) -> bool: ...
    def __neg__(self) -> LR: ...
    def __pos__(self) -> LR: ...
    def __abs__(self) -> LR: ...
    def __eq__(self, other: int | float | LR) -> bool: ...
    def __lt__(self, other: int | float | LR) -> bool: ...
    def __ne__(self, other: LR) -> bool: ...
    def __le__(self, other: LR) -> bool: ...
    def __gt__(self, other: LR) -> bool: ...
    def __ge__(self, other: LR) -> bool: ...
    def __add__(self, other: LR) -> LR: ...
    def __sub__(self, other: LR) -> LR: ...
    def __mul__(self, other: LR) -> LR: ...
    def __floordiv__(self, other: LR) -> LR: ...
    def __truediv__(self, other: LR) -> LR: ...
    def __mod__(self, other: LR) -> LR: ...
    def __pow__(self, other: LR) -> LR: ...
    def __div__(self, other: LR) -> LR: ...
    def __divmod__(self, other: LR) -> Tuple[LR, LR]: ...
    def copy(self) -> LR: ...
