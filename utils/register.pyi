from _typeshed import Incomplete
from typing import Any, Callable

class Register(dict):
    def __init__(self, *args, **kwargs) -> None: ...
    def register(self, target) -> Callable: ...
    def __call__(self, target): ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    def __contains__(self, key) -> bool: ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def get(self, key, default: Incomplete | None = ...) -> Any: ...
    def setdefault(self, key, default: Incomplete | None = ...) -> Any: ...
    def pop(self, key, default: Incomplete | None = ...): ...
    def clear(self): ...
    def reg(self, target): ...
    def get_args(self, func_name): ...
    def get_kwargs(self, func_name): ...
    def print_all(self) -> None: ...

functions: Register
classes: Register
