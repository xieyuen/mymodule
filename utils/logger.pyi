from _typeshed import Incomplete
from typing import Callable, Tuple, TypeVar

Level = TypeVar('Level', 'debug', 'info', 'warning', 'error', 'critical')
Massage = TypeVar('Massage', str, bytes, bytearray, memoryview)

class Logger:
    class PrintLog:
        level: Incomplete
        log: Incomplete
        def __init__(self, __level: str) -> None: ...
        def __call__(self, message: str) -> Tuple[Level, Massage]: ...
    def __init__(self) -> None: ...
    def debug(self, msg: str) -> Tuple[Level, Massage]: ...
    def info(self, msg: str) -> Tuple[Level, Massage]: ...
    def warning(self, msg: str) -> Tuple[Level, Massage]: ...
    def warn(self, msg: str) -> Tuple[Level, Massage]: ...
    def error(self, msg: str) -> Tuple[Level, Massage]: ...
    def critical(self, msg: str) -> Tuple[Level, Massage]: ...
    def crit(self, msg: str) -> Tuple[Level, Massage]: ...
    def catch_exc(self, callback) -> Callable: ...

logger: Incomplete

def debug(msg: Massage) -> Tuple[Level, Massage]: ...
def info(msg: Massage) -> Tuple[Level, Massage]: ...
def warning(msg: Massage) -> Tuple[Level, Massage]: ...
def warn(msg: Massage) -> Tuple[Level, Massage]: ...
def error(msg: Massage) -> Tuple[Level, Massage]: ...
def critical(msg: Massage) -> Tuple[Level, Massage]: ...
def crit(msg: Massage) -> Tuple[Level, Massage]: ...

# Names in __all__ with no definition:
#   catch_exc
