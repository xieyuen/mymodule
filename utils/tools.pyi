from _typeshed import Incomplete
from typing import List

class SysCmd:
    @staticmethod
    def cmd(command: str = ...) -> None: ...
    @staticmethod
    def mkdir(_file_name) -> None: ...
    @staticmethod
    def md(_file_name) -> None: ...
    @staticmethod
    def del_file(path) -> None: ...
    @staticmethod
    def rmdir(path) -> None: ...
    @staticmethod
    def rd(path) -> None: ...
    @staticmethod
    def cd(work_path: Incomplete | None = ...) -> None: ...

def has_Chinese(string): ...
def isChinese(string: str) -> bool: ...
def num_len(num: int | float): ...
def listDedup(_list: List) -> List: ...

class ListSort:
    @staticmethod
    def select(li): ...
    @staticmethod
    def insert(li): ...
    @staticmethod
    def quick(li): ...
    @staticmethod
    def bubble(li): ...
    @staticmethod
    def shell(li): ...
    @staticmethod
    def count(li): ...
    @staticmethod
    def bucket(li): ...

def C(m: int, n: int) -> int: ...
def A(m: int, n: int) -> int: ...
def str2bool(obj: str) -> bool: ...
def str2dict(obj: str) -> dict: ...
def str2list(obj: str) -> list: ...

class Disable:
    obj: Incomplete
    disable_obj: bool
    def __init__(self, obj) -> None: ...
    def disable(self) -> None: ...
    def enable(self) -> None: ...
    class DisableError(Exception): ...
